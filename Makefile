# myVault Makefile
# type "make help" to get information about the targets.
SHELL := bash

# Trigger version and timestamp generation if any of the none
# generated source files change.
VERSION_SRCS := www/index.html $(shell ls www/js/*js | grep -v version)

include util.mk

.PHONY: all
all:  lint build test  ## Build, lint and test the project (default).

# Build the Rust encryption module as WASM and the version info.
.PHONY: build b
b \
build: www/js/crypt.js www/js/crypt_bg.wasm Pipfile.lock version src-docs jsdoc  ## Build the project (alias b).

www/js/crypt.js: crypt/crypt/pkg/rel/crypt.js
	$(call hdr,"copying rust generated file: $@")
	cd crypt && $(MAKE)
	cp $< $@

www/js/crypt_bg.wasm: crypt/crypt/pkg/rel/crypt_bg.wasm
	$(call hdr,"copying rust generated file: $@")
	cd crypt && $(MAKE)
	cp $< $@

crypt/crypt/pkg/rel/crypt_bg.wasm \
crypt/crypt/pkg/rel/crypt.js:
	$(call hdr,"building rust: $@")
	cd crypt && $(MAKE)

# lint
# js and python, rust is linted by clippy during the crypt build
,PHONY: lint
lint: lint-py lint-js  ## Lint python and javascript source code. The Rust source code is lined in the crypt build using clippy.

.PHONY: lint-py
lint-py:  Pipfile.lock  ## Lint python source code using pylint.
	$(call hdr,"$@")
	pipenv run pylint tests/test_ui.py

Pipfile.lock: Pipfile
	$(call hdr,"update pipenv")
	pipenv update

.PHONY: lint-js
# ignore crypt.js it is generated automatically
# jshint:
#   $ sudo npm update -g
#   $ sudo npm install -g jshint
lint-js:  ## Lint javascript source code using jshint.
	$(call hdr,"$@")
	jshint --version
	jshint --config jshint.json $$(ls -1 www/js/*js | grep -v crypt.js)
	jshint --config jshint.json www/xtra/cryptor.js

# help
.PHONY: src-docs
src-docs: www/help/index.html  ## Generate the on-line help documentation for the source code using pandoc.

# jsdoc:
#   $ sudo npm update -g
#   $ sudo npm install -g jsdoc
.PHONY: jsdoc
jsdoc:  www/xtra/doc/index.html  ## Generate the internal source code documentation using jsdoc.

www/xtra/doc/index.html: README.md $(VERSION_SRCS)
	$(call hdr,"jsdoc")
	rm -rf www/doc
	jsdoc --version
	jsdoc -c jsdoc.conf -d www/xtra/doc -R README.md www/js/
	$(SED) -i 's/JSDoc: Home/JSDoc: myVault/g' www/xtra/doc/index.html

# Create the HTML based README
www/help/index.html: README.md VERSION www/help/index.css
	$(call hdr,"generating help")
	cp README.md tmp.md
	$(SED) -i "s/__VERSION__/$$(cat VERSION | tr -d ' \n')/g" tmp.md
	$(SED) -i "s/__BUILD__/$$(gdate -Iseconds | tr -d ' \n')/g" tmp.md
	$(SED) -i "s/__GIT_COMMIT_ID__/$$(git rev-parse --short HEAD | tr -d ' \n')/g" tmp.md
	$(SED) -i "s/__GIT_BRANCH__/$$(git rev-parse --abbrev-ref HEAD | tr -d ' \n')/g" tmp.md
	grep -v '^# myVault' tmp.md > tmp1.md
	grep -v '\[\!\[Releases\](' tmp1.md > tmp.md
	pandoc -s --css index.css -s --metadata title='Help: myVault' --html-q-tags -o $@ tmp.md
	rm -f tmp*.md

# version
# Generate the dynamic build/version information
.PHONY: version
version: www/js/version.js ## Generate the www/js/version.js data from VERSION and other sources.

www/js/version.js: VERSION $(VERSION_SRCS) README.md
	$(call hdr,"$@")
	@sleep 1
	echo '/**' > $@
	echo " * The dynmamic version that is  automatically generated by the build process." >> $@
	echo ' * @module version' >> $@
	echo ' */' >> $@
	echo "export var VERSION = '$$(cat VERSION | tr -d ' \n')'" >> $@
	echo "export var BUILD = '$$(gdate -Iseconds | tr -d ' \n')'" >> $@
	echo "export var GIT_COMMIT_ID = '$$(git rev-parse --short HEAD | tr -d ' \n')'" >> $@
	echo "export var GIT_BRANCH = '$$(git rev-parse --abbrev-ref HEAD | tr -d ' \n')'" >> $@
	cat -n $@

# spell check README
.PHONY: spell-check
spell-check:  ## Spell check the README.md file using aspell.
	$(call hdr,"$@")
	aspell check README.md

# clean -don't touch the local keep directory
.PHONY: clean
clean:  ## Clean up.
	$(call hdr,"$@")
	find . -type f -name '*~' -delete
	rm -f *.tar
	-git clean -xdf -e keep .

# Backup - the (git) source - redundant once in github
.PHONY: backup bu
bu \
backup: myvault-git.tar  ## Backup the source code (alias bu) to myvault-git.tar, this is redundantnow that the project is in github.

BGFILE ?= myvault-git.tar
$(BGFILE): .git/index
	$(call hdr,"backup git to $@")
	rm -f $@
	$(TAR) -Jcf $@ .git .gitignore
	ls -lh $@

# Create the web application
.PHONY: webapp
w \
webapp:   ## Create the web release tar file for upload to a site (myvault/).
	$(call hdr,"$@")
	$(SED) -i 's@/js/@/myvault/js/@g' www/index.html $$(ls -1 www/js/*js) www/xtra/cryptor.html www/xtra/cryptor.js
	$(SED) -i 's@/icons/@/myvault/icons/@g' www/index.html $$(ls -1 www/js/*js)
	$(SED) -i 's@/help/@/myvault/help/@g' www/js/about.js
	$(SED) -i 's@/xtra/@/myvault/xtra/@g' www/help/index.html www/js/about.js www/xtra/cryptor.html www/xtra/cryptor.js
	$(TAR) -J -c -f webapp.tar --transform 's/^www/myvault/' www
	$(SED) -i 's@/myvault/js/@/js/@g'  www/index.html $$(ls -1 www/js/*js) www/xtra/cryptor.html www/xtra/cryptor.js
	$(SED) -i 's@/myvault/icons/@/icons/@g' www/index.html $$(ls -1 www/js/*js)
	$(SED) -i 's@/myvault/help/@/help/@g' www/js/about.js
	$(SED) -i 's@/myvault/xtra/@/xtra/@g' www/help/index.html www/js/about.js www/xtra/cryptor.html www/xtra/cryptor.js
	ls -lh webapp.tar


# Run a local server for testing on port 8000 (PORT=8000)
# using either a rust server or a python server.
HTTP_SERVER ?= python
PORT ?= 8000
PHONY: server
server: ## Run a simple local server for debugging. To change the port: make server PORT=8000.
	$(call hdr,"$@")
ifeq ($(strip $(HTTP_SERVER)),rust)
	-cargo install simple-http-server
	cd www && simple-http-server -p $(PORT)
else
	python3 --version
	cd www && python3 -m http.server $(PORT)
endif

.PHONY: test
test: Pipfile.lock ## Run the local unit tests in headless mode.
	$(call hdr,"$@")
	PORT=8007 pipenv run python -m pytest tests/test_ui.py --options="headless, incognito, no-sandbox, --disable-gpu"

.PHONY: testi ti
ti \
testi: Pipfile.lock  ## Run the local unit tests in interactive mode.
	$(call hdr,"$@")
	PORT=8007 pipenv run python -m pytest tests/test_ui.py

# PROJECT_DIR is the name of the directory in the container.
PROJECT_DIR ?= myvault-dev
.PHONY: docker-image
di \
docker-image: ## Create the docker myvault/dev image for development, this takes awhile.
	$(call hdr,"$@")
	docker build \
		--build-arg PROJECT_DIR=$(PROJECT_DIR) \
		--progress plain \
		-t myvault/dev:latest \
		-f Dockerfile.dev \
		.

CPORT     ?= 8007
.PHONY: dev
d \
dev: docker-image  ## Create the docker container used for development and login.
	$(call hdr,"$@")
	docker run -it --rm --init \
		--name myvault-dev \
		-h myvault-dev \
		-p $(CPORT):8000 \
		-w "/$(PROJECT_DIR)" \
		-v $(PWD):/$(PROJECT_DIR) \
		myvault/dev:latest \
		bash

# Help.
.PHONY: help
help:  ## This help message.
	@echo "Targets"
	@$(EGREP) '^[ ]*[^:]*[ ]*:.*##' $(MAKEFILE_LIST) 2>/dev/null | \
		$(EGREP) -v '^ *#' | \
	        $(EGREP) -v "EGREP|SORT|SED" | \
		$(SED) -e 's/: .*##/##/' -e 's/^[^:#]*://' | \
		$(COLUMN) -t -s '##' | \
		$(SORT) -f | \
		$(SED) -e 's@^@   @'
	@echo "Variables"
	@echo "   EGREP         : $(EGREP)"
	@echo "   COLUMN        : $(COLUMN)"
	@echo "   SED           : $(SED)"
	@echo "   SORT          : $(SORT)"
	@echo "   TAR           : $(TAR)"
	@echo "   MAKEFILE_LIST : $(MAKEFILE_LIST)"
	@echo "   PORT          : $(PORT) - server port"
	@echo "   HTTP_SERVER   : $(HTTP_SERVER) - the server to use: rust or python"
	@echo "   SHELL         : $(SHELL)"
	@echo "   VERSION_SRCS  : $(VERSION_SRCS)"
